global !p
def capitalize_first(word):
	if(word):
		word = word[0].upper() + word[1:]
	return word
endglobal

snippet t "tag" i
<${1}>${0}</$1>
endsnippet

snippet cl "class" i
class="${1}"
endsnippet

snippet cn "className" i
className={${1}}
endsnippet

snippet div "div" i
<div ${1}></div>
endsnippet

snippet link "Link Tag" i
<Link href={${1}}>${2}</Link>
endsnippet


snippet skelton "Skelton" b
import { FC } from 'react'

export type Props = {
}

const ${1:ComponentName}: FC<Props> = (p : Props) => {
	return (
		<>
		</>
	)
}
export default $1
endsnippet


snippet useS "useState Hook" b
const [${1}, set`!p snip.rv=capitalize_first(t[1])`] = useState(${3:"${4}"})
endsnippet

snippet useE "useEffect Hook" b
useEffect(() => {
	${1:${0}}
		}${2})
endsnippet

snippet useC "useContext Hook" b
const ${1:context} = useContext(${2})
endsnippet

snippet useRed "useReducer Hook" b
const [${3:state}, ${4:dispatch}] = useReducer(${5:reducer}, ${2:initial_value})
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback((${2})) => ${3:{
	${4}
}}, [${5}])
endsnippet

snippet useM "useMemo(fn, inputs)" b
const ${1:memorized} = useMemo(() => ${2:{
	${3}
}}, [${4}])
endsnippet

snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef(${2:null})
endsnippet

snippet ir "import React"
import React from "react"
endsnippet

snippet irc "import React and Component"
import React, { Component } from "react"
endsnippet

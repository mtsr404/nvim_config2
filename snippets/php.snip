snippet ai
	'${1}' => ${2},

snippet th
options word
	$this->${1}

snippet thisc
	$this->${1} = \$$1;

snippet startsWith
options word
	strpos(${1:needle},${2:target}) === 0 

snippet endsWith
options word
	substr(${1:target}, -strlen(${2:needle})) === $2;

snippet collectMap
	collect(${1})
		->map(function($e)${2:use}{
			${3}
		})${0}

snippet collectReduce
	collect(${1})
		->reduce(function($acc,$e)${2:use}{
			${3}
		},${4:default})${0}

snippet useValidator
	use Validator;
	use Illuminate\Validation\Rule;

snippet valid
	$validator = Validator::make(${1:target},[
		${2:rules}
	]);
	if($validator->fails()){
		throw new \InvalidArgumentException($validator->errors()->first());
	}
	${0}

snippet useModels
	use App\Models\\${1};

snippet useExceptions
	use App\Exceptions\\${1}Exception;

snippet useLog
	use Illuminate\Support\Facades\Log;

snippet logInfo
	Log::info(${1});


snippet function
abbr public function () {}
	${1:public }function ${2:#:FunctionName}(${3}){
		${4:TARGET}
	}


snippet exhttp
	use Symfony\Component\HttpKernel\Exception\HttpException;

snippet exhttpNotFound
	use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

snippet exhttpAcccesDenied
	use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;


snippet t
options word
	<${1}>${2}</$1>

snippet cl
options word
	class="${1}"

snippet img
options word
	<img src="${1}"/>

snippet br
options word
	<br>

